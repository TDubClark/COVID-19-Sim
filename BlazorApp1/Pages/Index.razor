@page "/"

@using BlazorApp1.Data
@inject PersonService ps

<h3>COVID-19 Simulation 0.1</h3>
<p>This is a simplistic simulation of COVID-19 transmission (MIT License, <a target="_blank" href="https://github.com/TDubClark/COVID-19-Sim">GitHub</a>).  It is a work in progress.</p>
<p>I wanted to demonstrate the importance of preventative measures; it can slow transmission and save lives.</p>
<p>
    There is no way to be "correct":<br>
    If we treat this disease with an abundance of caution, it will turn out to be less serious than we anticipated.<br>
    If we disregard the gravity of this pandemic, it will turn out much worse than expected.
</p>
<p>
    However, if we panic and stop looking out for other people, it may reduce the communicability of this disease;
    but it will exacerbate all manner of other problems and increase other risks to life and health.
</p>
<ol class="list">
    <li>
        <strong>Stop airborne spread (most important):</strong>
        <ol>
            <li>cover your cough or sneeze, ideally in a tissue which is immediately thrown away</li>
            <li>practice "social distancing" - try to stay at least 6 feet from other people.  The virus doesn't project too far, but in some cases it can linger for 30 minutes in the air</li>
        </ol>
    </li>
    <li>
        <strong>Stop contact spread:</strong>
        <ol>
            <li>wash your hands very well and often (20 seconds)</li>
            <li>avoid touching your face (eyes, nose, mouth) unless you wash your hands before and after</li>
        </ol>
    </li>
    <li>Help anyone you know stay comfortable in quarantine; it's hard, so talk with them (from a distance) and help them with groceries.</li>
    <li>Find ways to help neighbors, friends, schools, and hospitals</li>
    <li>Go here: <a target="_blank" href="https://www.cdc.gov/coronavirus/2019-ncov/index.html">https://www.cdc.gov/coronavirus/2019-ncov/index.html</a> for better information.</li>
</ol>
<p>If you see someone failing to follow the recommendations, please encourage them to be more careful.</p>
<style type="text/css">
    .grid {
        border-collapse: collapse;
        font-size: .7em;
    }

        .grid td {
            border: 1px solid #e3e3e3;
            padding: .1em;
        }

        .grid .d { /* Deceased */
            background-color: black;
            color: white;
        }

        .grid .i,
        .grid .qi { /* Infected */
            background-color: #ff7777;
        }

        .grid .qi,
        .grid .qm,
        .grid .qs { /* Infected, quarantined */
            border: 2px solid #000;
        }

        .grid .m,
        .grid .qm { /* Infected - mild */
            background-color: #ffaaaa;
        }

        .grid .s,
        .grid .qs { /* Infected - Severe */
            background-color: #ff0000;
        }

        .grid .h { /* Healthy */
            background-color: white;
        }

        .grid .r { /* Recovered */
            background-color: forestgreen;
        }

        .grid .v { /* Vaccinated */
            background-color: #e3e3e3;
            color: #777;
        }
</style>

@if (people == null)
{
    <div>loading...</div>
}
else
{
    <div style="border: 1px solid #e3e3e3; padding: .5em; margin: .5em; width: 50%">
        <p>Run scenario - select public reaction to the disease:</p>
        <button class="hippie" @onclick="runHippie">@*Nothing to worry about, bro.  Just chill...<br />*@<img src="chillax2.jpg" height="180" /></button>
        <button class="biohazdefcon1" @onclick="runPanic">@*[PANDEMIC] initiate bunker hermetic seal protocol!<br />*@<img src="biosuit.jpg" height="180" /></button>
    </div>
    <div>
        <div style="width: 50%; float: left;">
            @*<button class="btn btn-primary" @onclick="RunSim">Run</button>*@
            <p>Each cell represents a person, given by their age; color-coding indicates health status.</p>
            <p>This model assumes that if hospitals reach capacity, they will triage out the oldest patients.  However, it does not take into account hospital worker stress - hospitals cannot operate at full capacity for very long, something which would contribute to an even higher mortality rate in the relaxed scenario.</p>
            <p></p>
            <table class="grid">
                @for (int i = 0; i < people.Length; i += gridwidth)
                {
                    <tr>
                        @for (int j = 0; j < gridwidth; j++)
                        {
                            var local1 = people[i + j];
                            <td class="@local1.getCode()">@local1.ToString("age")</td>
                        }
                    </tr>
                }
            </table>
        </div>
        <div style="width: 50%; float: right;">
            <div>Days since start: @state.CurrentDateTime.Subtract(state.SimStart).TotalDays.ToString()</div>
            <div>Hospital Capacity: @state.RunningHospitalCapacity.ToString("P1")</div>
            <div>Deaths: @state.RunningDeathsTotal.ToString(); Death Rate: @state.RunningResolvedDeathRate.ToString("P1")</div>
            <br />
            <div>Key:</div>
            <table class="grid">
                <tr>
                    <td class="h">healthy/uninfected</td>
                </tr>
                <tr>
                    <td class="r">recovered</td>
                </tr>
                <tr>
                    <td class="v">vaccinated</td>
                </tr>
                <tr>
                    <td class="i">infected (incubation)</td>
                </tr>
                <tr>
                    <td class="m">infected - mild symtoms</td>
                </tr>
                <tr>
                    <td class="s">infected - severe symtoms</td>
                </tr>
                <tr>
                    <td class="qi">infected (incubation)/quarantined</td>
                </tr>
                <tr>
                    <td class="qm">infected - mild symtoms/quarantined</td>
                </tr>
                <tr>
                    <td class="qs">infected - severe symtoms/quarantined</td>
                </tr>
                <tr>
                    <td class="d">deceased</td>
                </tr>
            </table>
            <br /><br />
            <EditForm Model="@state" OnSubmit="RestartSim">
                <div>R-value: <InputNumber @bind-Value="state.RValue"></InputNumber></div>
                <div>Severe case rate: <InputNumber @bind-Value="state.SeverityRateFatal"></InputNumber></div>
                <div>Mortality rate for severe cases: <InputNumber @bind-Value="state.SeverityRateFatal"></InputNumber></div>
                <div>Mortality rate for mild cases: <InputNumber @bind-Value="state.MortalityRateMildCases"></InputNumber></div>
                <div>Infection Duration: <InputNumber @bind-Value="state.InfectionDurationDays"></InputNumber></div>
                <div>Vaccination Rate: <InputNumber @bind-Value="state.VaccinationRate"></InputNumber></div>
                <div>Quaranine rate for presenting cases: <InputNumber @bind-Value="state.QuarantineRate"></InputNumber></div>
                <input type="submit" value="Rerun" class="btn btn-primary" />
            </EditForm>

        </div>
    </div>
}
<div style="display: block; width: 100%;">
    <p>
        Notes:<br>
        This is not a proper model - it is more a proof-of-concept.<br>
        If you want know how it works (as it were), you can view the source here: <a target="_blank" href="https://github.com/TDubClark/COVID-19-Sim">https://github.com/TDubClark/COVID-19-Sim</a><br>
        If you have any brainwaves about how to improve the UI or the model, please contribute or fork the repository.<br />
        I'd be quite happy if others were able to expand this into a more useful education tool.
    </p>
    <p>Comments to me: twclark.depauw2007@gmail.com</p>
</div>

@code {
    // the width of the grid
    private int gridwidth = 40;
    private int populationCount = 1600;
    private int personsPerIcuBed = 20;

    private State state;

    private Person[] people;

    private System.Timers.Timer timer = new System.Timers.Timer(500);

    void runHippie() { state.RValue = 9.0f; state.QuarantineRate = .1f; RestartSim(); }
    void runPanic() { state.RValue = 1.3f; state.QuarantineRate = .9f; RestartSim(); }

    protected override void OnInitialized()
    {
        timer.Elapsed += new System.Timers.ElapsedEventHandler(TimerTick);
        timer.Start();
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        state = new State
        {
            CurrentDateTime = new DateTime(2020, 03, 10),
            SimStart = new DateTime(2020, 03, 10),
            HoursFromInfectionToContegeousness = 24,
            InfectionDurationDays = 30,
            RValue = 2.2f,
            SeverityRate = .20f,
            SeverityRateFatal = .25f,
            HospitalIntensiveTreatementCapacity = (populationCount / personsPerIcuBed),
            InfectionIncubationDurationDays = 14,
            MortalityRateMildCases = 0.002f,
            VaccinationRate = 0.0f,
            QuarantineRate = .6f
        };

        people = await ps.GetPeopleAsync(state, populationCount);
        //return base.OnInitializedAsync();
    }

    void TimerTick(object sender, System.Timers.ElapsedEventArgs args)
    {
        timer.Stop();

        // Run the simulation
        RunSim();

        // Indicate to the page that the state has changed, and the view needs to update.
        InvokeAsync(() => StateHasChanged());

        // Restart if any people are still infected.
        if (people.Any(x => x.IsInfected()))
            timer.Start();
    }


    private void RestartSim()
    {
        state.Restart();
        Restart();
        timer.Start();
    }

    private async void Restart()
    {
        people = await ps.GetPeopleAsync(state, populationCount);
    }

    private void RunSim()
    {
        state.RunModel(people, new TimeSpan(24, 0, 0));
    }
}
